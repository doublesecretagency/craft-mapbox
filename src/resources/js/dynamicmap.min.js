function DynamicMap(locations,options){locations=locations||[];options=options||{};this.id=null;this.div=null;this._map=null;this._markers={};this._popups={};this._d={};this._comfortableZoom=11;this.__construct=function(locations,options){if(Array.isArray(locations)){if(!locations.length){locations=null}}else if("object"===typeof locations){locations=[locations]}else{locations=null}options=options||{};const mapOptions=options.mapOptions||{};this.id=options.id||this._generateId("map");this.div=document.getElementById(options.id);if(!this.div){this.div=document.createElement("div")}this.div.id=this.id;this.div.classList.add("mb-map");this.div.style.display="block";mapOptions.center=mapOptions.center||options.center||null;mapOptions.center=mapOptions.center||[0,0];this._d.center=mapOptions.center;this._d.zoom=options.zoom||null;this._d.markerOptions=options.markerOptions||{};this._d.popupOptions=options.popupOptions||{};if(options.height){this.div.style.height=`${options.height}px`}if(options.width){this.div.style.width=`${options.width}px`}mapOptions.zoom=mapOptions.zoom||options.zoom||null;mapOptions.style=mapOptions.style||options.style||"streets-v12";mapOptions.style=this._normalizeStyle(mapOptions.style);this._createMap(mapOptions);if(locations){this.markers(locations)}};this.markers=function(locations,options){if(!locations){return}options=options||{};options.markerOptions=options.markerOptions||this._d.markerOptions;options.popupOptions=options.popupOptions||this._d.popupOptions;if(!Array.isArray(locations)){locations=[locations]}for(var i in locations){var coords=locations[i];if(!coords.hasOwnProperty("lng")||!coords.hasOwnProperty("lat")){continue}var markerId=coords.id||options.id||this._generateId("marker");coords.id=markerId;this._createMarker(coords,options)}return this};this.style=function(style){style=style||null;if(mapbox.log){console.log(`[${this.id}] Styling map`,style)}this._map.setStyle(this._normalizeStyle(style));return this};this.zoom=function(level,assumeSuccess){level=level||this._d.zoom;this._d.zoom=level;if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Zooming map to level`,level)}this._map.setZoom(level);return this};this.center=function(coords,assumeSuccess){coords=coords||this._determineBounds().getCenter()||this._d.center;if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Centering map on coordinates`,coords)}if(!coords){console.warn(`[MB] Unable to center map, invalid coordinates:`,coords);return this}coords.lng=parseFloat(coords.lng);coords.lat=parseFloat(coords.lat);this._d.center=coords;this._map.setZoom(1);this._map.setCenter(coords);return this};this.fit=function(options,assumeSuccess){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Fitting map to existing boundaries`)}const bounds=this._determineBounds();if(!bounds){console.warn(`[MB] Cannot fit the map, unable to determine bounds.`);return this}options=options||{};options.padding=options.padding||{top:70,right:40,bottom:40,left:40};this._map.fitBounds(bounds,options);return this};this.panToMarker=function(markerId){if(mapbox.log){console.log(`[${this.id}] Panning to marker "${markerId}"`)}const marker=this.getMarker(markerId,true);if(!marker){console.warn(`[MB] Unable to pan to marker "${markerId}"`);return this}this._map.panTo(marker.getLngLat());return this};this.changeMarker=function(markerId,options,assumeSuccess){if(Array.isArray(markerId)){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Setting options for multiple markers`)}for(var i in markerId){this.changeMarker(markerId[i],options)}return this}if("*"===markerId){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Setting options for all markers:`,options)}for(var key in this._markers){this.changeMarker(key,options,true)}return this}if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Setting options for marker "${markerId}":`,options)}const oldMarker=this.getMarker(markerId,true);if(!oldMarker){console.warn(`[MB] Unable to set options, marker "${markerId}" does not exist.`);return this}this._markers[markerId]=new mapboxgl.Marker(options).setLngLat(oldMarker.getLngLat()).addTo(this._map);if(this._popups[markerId]){this._markers[markerId].setPopup(this._popups[markerId])}oldMarker.remove();return this};this.hideMarker=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(mapbox.log){console.log(`[${this.id}] Hiding multiple markers`)}for(var i in markerId){this.hideMarker(markerId[i])}return this}if("*"===markerId){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Hiding all markers`)}for(var key in this._markers){this.hideMarker(key,true)}return this}if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Hiding marker "${markerId}"`)}const marker=this.getMarker(markerId);if(!marker){console.warn(`[MB] Unable to hide marker "${markerId}"`);return this}marker.remove();return this};this.showMarker=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(mapbox.log){console.log(`[${this.id}] Showing multiple markers`)}for(var i in markerId){this.showMarker(markerId[i])}return this}if("*"===markerId){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Showing all markers`)}for(var key in this._markers){this.showMarker(key,true)}return this}if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Showing marker "${markerId}"`)}const marker=this.getMarker(markerId);if(!marker){console.warn(`[MB] Unable to show marker "${markerId}"`);return this}marker.addTo(this._map);return this};this.openPopup=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(mapbox.log){console.log(`[${this.id}] Opening multiple popups`)}for(var i in markerId){this.openPopup(markerId[i])}return this}if("*"===markerId){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Opening all popups`)}for(let key in this._popups){this.openPopup(key,true)}return this}if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Opening popup "${markerId}"`)}const popup=this.getPopup(markerId,true);if(!popup){console.warn(`[MB] Unable to open popup "${markerId}"`);return this}popup.addTo(this._map);return this};this.closePopup=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(mapbox.log){console.log(`[${this.id}] Closing multiple popups`)}for(var i in markerId){this.closePopup(markerId[i])}return this}if("*"===markerId){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Closing all popups`)}for(var key in this._popups){this.closePopup(key,true)}return this}if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Closing popup "${markerId}"`)}var popup=this.getPopup(markerId,true);if(!popup){console.warn(`[MB] Unable to close popup "${markerId}"`);return this}popup.remove();return this};this.getMarker=function(markerId,assumeSuccess){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing marker "${markerId}"`)}var marker=this._markers[markerId];if(!marker){console.warn(`[MB] Unable to find marker "${markerId}"`)}return marker};this.getPopup=function(markerId,assumeSuccess){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing popup "${markerId}"`)}var popup=this._popups[markerId];if(!popup){console.warn(`[MB] Unable to find popup "${markerId}"`)}return popup};this.getZoom=function(assumeSuccess){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Getting the current zoom level of the map`)}return this._map.getZoom()};this.getCenter=function(assumeSuccess){if(mapbox.log&&!assumeSuccess){console.log(`[${this.id}] Getting the current center point of the map`)}return this._map.getCenter()};this.getBounds=function(){if(mapbox.log){console.log(`[${this.id}] Getting the current bounds of the map`)}return this._map.getBounds()};this.tag=function(options){if(mapbox.log){console.log(`[${this.id}] Rendering map`)}options=options||{};const parentId=options.parentId||null;if(!parentId||"string"!==typeof parentId){this._checkMapVisibility();if(mapbox.log){console.log(`[${this.id}] Finished initializing map üëç`)}return this.div}const parent=document.getElementById(parentId);if(parent){parent.appendChild(this.div)}else{console.warn(`[MB] Unable to find target container #${parentId}`)}this._checkMapVisibility();if(mapbox.log){console.log(`[${this.id}] Finished initializing map in container "${parentId}" üëç`)}return this.div};this._createMap=function(mapOptions){if(mapbox.log){console.log(`[${this.id}] Creating map`)}if(!window.mapboxAccessToken){console.warn(`[MB] Unable to initialize map, no access token provided.`);return}mapOptions.container=this.id;mapboxgl.accessToken=window.mapboxAccessToken;this._map=new mapboxgl.Map(mapOptions)};this._createMarker=function(coords,options){const markerId=coords.id;if(mapbox.log){console.log(`[${this.id}] Adding marker "${markerId}"`)}if(options.markerOptions.element){let element=options.markerOptions.element;let warnAppend="";if("string"===typeof element){warnAppend=` (${element})`;element=element.replace(/^#/,"");element=document.getElementById(element)}if(element&&"object"===typeof element){options.markerOptions.element=element.cloneNode(true)}else{options.markerOptions.element=null;options.markerOptions.anchor=null;console.warn(`[MB] Invalid custom marker icon.${warnAppend}`)}}this._markers[markerId]=new mapboxgl.Marker(options.markerOptions).setLngLat([coords.lng,coords.lat]).addTo(this._map);if(!window._mbData||!window._mbData.popups){return}const mapPopups=window._mbData.popups[this.id]||[];const markerPopup=mapPopups[markerId]||null;if(!markerPopup||!markerPopup.content){return}if(mapbox.log){console.log(`[${this.id}] Adding popup to marker "${markerId}"`)}const content=markerPopup.content;delete markerPopup.content;if(!options.popupOptions||!Object.keys(options.popupOptions).length){options.popupOptions=markerPopup||{}}this._popups[markerId]=new mapboxgl.Popup(options.popupOptions).setHTML(content);this._markers[markerId].setPopup(this._popups[markerId])};this._determineBounds=function(){const bounds=new mapboxgl.LngLatBounds;const totalMarkers=Object.keys(this._markers).length;if(!totalMarkers){console.warn(`[MB] Cannot determine bounds, the map has no existing markers.`);return null}for(const key in this._markers){const marker=this._markers[key];if(null===marker.map){continue}bounds.extend(marker.getLngLat())}return bounds};this._locationBounds=function(locations){const bounds=new mapboxgl.LngLatBounds;for(const key in locations){const location=locations[key];bounds.extend([location.lng,location.lat])}return bounds};this._checkMapVisibility=function(){this._checkHeight();this._finalCalibration()};this._checkHeight=function(){if(!mapbox.log){return}var height=this.div.clientHeight;if(0<height){return}var url="https://plugins.doublesecretagency.com/mapbox/guides/setting-map-height/";console.warn(`[MB] The map is not visible because its parent container is zero pixels tall. More info: ${url}`)};this._calculateCenter=function(bounds){if(this._validCoords(this._d.center)){return this._d.center}if(bounds){const boundsCenter=bounds.getCenter();if(this._validCoords(boundsCenter)){return boundsCenter}}console.error(`[MB] No items on the map, it will be centered in the middle of the ocean! üêô`,{lat:0,lng:0});this.zoom(2,true);return[0,0]};this._calculateZoom=function(totalMarkers){if(this._d.zoom&&!isNaN(this._d.zoom)){return this._d.zoom}if(!totalMarkers||totalMarkers<2){return this._comfortableZoom}setTimeout(()=>{this.fit({animate:false})},10);return this._comfortableZoom};this._finalCalibration=function(){const totalMarkers=Object.keys(this._markers).length;const bounds=totalMarkers?this._determineBounds():null;center=this._calculateCenter(bounds);zoom=this._calculateZoom(totalMarkers);this.center(center);this.zoom(zoom)};this._validCoords=function(coords){if(!coords){return false}if(Array.isArray(coords)&&coords.length===2){coords={lng:coords[0]||0,lat:coords[1]||0}}return!!(coords.lng||coords.lat)};this._normalizeStyle=function(style){if(!style){return null}if("string"!==typeof style){return style}const isNative=/^[a-z-]+-v[0-9]+$/.test(style);const isUrl=/:\/\//.test(style);if(isNative){return`mapbox://styles/mapbox/${style}`}if(isUrl){return style}return JSON.parse(style)};this._generateId=function(prefix){var randomId="";var alpha="abcdefghijklmnopqrstuvwxyz";var alphabet=alpha.split("");for(char=0;char<6;char++){var i=Math.floor(Math.random()*25);randomId+=alphabet[i]}return prefix?`${prefix}-${randomId}`:randomId};this.__construct(locations,options)}