document.addEventListener("DOMContentLoaded",()=>{window.mapbox=window.mapbox||{log:window._mbData?window._mbData.logging:false,_maps:{},map:function(locations,options){if(this.log){console.log(`============================================================`);console.log(`Creating a new map object`)}const map=new DynamicMap(locations,options);this._maps[map.id]=map;return map},getMap:function(mapId,assumeSuccess){if(this.log&&!assumeSuccess){console.log(`============================================================`);console.log(`[${mapId}] Getting existing map`)}const map=this._maps[mapId];if(!map){console.warn(`[MB] Unable to find map "${mapId}"`)}return map},init:function(mapId,callback){if(null===mapId){mapId=void 0}const containers=this._whichMaps(mapId);for(let i in containers){let map=containers[i];if(!map){console.warn(`[MB] Cannot find specified map container #${mapId}`);continue}let matchingContainers=document.querySelectorAll(`#${map.id}`).length;if(!matchingContainers){console.warn(`[MB] No DOM element exists using the identifier #${map.id}`);continue}if(1<matchingContainers){console.warn(`[MB] Multiple DOM elements are using the identifier #${map.id}`);continue}if(this.log){console.log(`============================================================`);console.log(`[${map.id}] Initializing map`)}let dna=map.dataset.dna;if(!dna){console.warn(`[MB] Map container #${map.id} is missing DNA`);continue}if(typeof mapboxgl==="undefined"){console.warn(`[MB] Unable to load the Mapbox API`);console.error(`[MB] mapboxgl is not defined`);continue}map.innerHTML="";this._unpack(dna);if(callback&&"function"===typeof callback){if(this.log){console.log(`[${map.id}] Running map callback function:\n`,callback)}callback()}}},_whichMaps:function(selection){let containers=[];switch(typeof selection){case"string":containers=[document.getElementById(selection)];break;case"object":for(let i in selection){let c=document.getElementById(selection[i]);containers.push(c)}break;case"undefined":const allMaps=document.getElementsByClassName("mb-map");containers=Array.prototype.slice.call(allMaps);break;default:containers=[];break}return containers},_unpack:function(dna){const sequence=JSON.parse(dna);if(!sequence){console.warn("[MB] No map DNA provided.");return}let map;for(let i=0;i<sequence.length;i++){let block=sequence[i];if(0===i&&"map"!==block.type){console.warn("[MB] Map DNA is misconfigured.");return}switch(block.type){case"map":map=new DynamicMap(block.locations,block.options);break;case"markers":map.markers(block.locations,block.options);break;case"style":map.style(block.mapStyle);break;case"zoom":map.zoom(block.level);break;case"center":map.center(block.coords);break;case"fit":map.fit(block.options);break;case"panToMarker":map.panToMarker(block.markerId);break;case"changeMarker":map.changeMarker(block.markerId,block.options);break;case"hideMarker":map.hideMarker(block.markerId);break;case"showMarker":map.showMarker(block.markerId);break;case"openPopup":map.openPopup(block.markerId);break;case"closePopup":map.closePopup(block.markerId);break}}map.tag();this._maps[map.id]=map;return map}}});